using System;
using System.IO;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using UnityEditor.SceneManagement;
using %PROJECT_NAME%.Configs;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using Zenject;

public class SceneMaker
{
    [MenuItem("Sample/Scenes/Create")]
    public static void Create()
    {
        var scenes = Enum.GetValues(typeof(Scenes));

        List<EditorBuildSettingsScene> settingsScenes = new List<EditorBuildSettingsScene>();

        foreach (var sceneName in scenes)
        {
            string strSceneName = sceneName.ToString();
            string folder = "Assets/Scenes/" + strSceneName + "/";
            
            if (!Directory.Exists(folder))
            {
                Directory.CreateDirectory(folder);
                AssetDatabase.Refresh();
            }

            string path = folder + strSceneName + ".unity";
            if (!File.Exists(path))
            {
                var scene = EditorSceneManager.NewScene(NewSceneSetup.DefaultGameObjects);
                var controller = new GameObject(strSceneName + "ViewController");
                Type type = GetType(GetScriptName(strSceneName));

                var installer = new GameObject(strSceneName + "Installer");
                MonoInstaller monoInstaller = installer.AddComponent(GetType(GetInstallerName(strSceneName))) as MonoInstaller;
                
                var context = new GameObject("SceneContext");
                SceneContext sceneContext = context.AddComponent<SceneContext>();
                sceneContext.Installers = new []{ monoInstaller };

                if (type != null)
                {
                    controller.AddComponent(type);
                    
                    AddCanvas("MainLayer", 10);
                    AddCanvas("SubLayer", 20);
                    AddCanvas("DialogLayer", 30);                
                    AddEventSystem();
                    
                    EditorSceneManager.SaveScene(scene, path);
                    Debug.Log("作成しました: " + strSceneName);
                }
            }
            else
            {
                Debug.Log("既に作成済です: " + strSceneName);
            }
            settingsScenes.Add(new EditorBuildSettingsScene(path, true));
        }
        EditorBuildSettings.scenes = settingsScenes.ToArray();
        AssetDatabase.SaveAssets();
    }

    private static string GetScriptName(string sceneName)
    {
        return "%PROJECT_NAME%.View.Scenes." + sceneName + "." + sceneName + "ViewController";
    }

    private static string GetInstallerName(string sceneName) 
    {
        return "%PROJECT_NAME%.View.Scenes." + sceneName + "." + sceneName + "Installer";
    }

    private static void AddEventSystem()
    {
        GameObject obj = new GameObject("EventSystem");
        obj.AddComponent<EventSystem>();
        obj.AddComponent<StandaloneInputModule>();        
    }

    private static void AddCanvas(string name, int priority)
    {
        Camera     camera        = GameObject.FindWithTag("MainCamera").GetComponent<Camera>();
        GameObject canvasObj = new GameObject( priority + "_" + name + "Canvas");
        Canvas     canvas    = canvasObj.AddComponent<Canvas>();
        canvas.worldCamera      = camera;
        canvas.renderMode       = RenderMode.ScreenSpaceCamera;
        canvas.sortingOrder     = priority;
        CanvasScaler scaler = canvasObj.AddComponent<CanvasScaler>();
        scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        scaler.referenceResolution = new Vector2(1920, 1080);
        canvasObj.AddComponent<GraphicRaycaster>();        
    }
    
    private static Type GetType(string scriptName)
    {
        var type = Type.GetType(scriptName);
        if (type != null) return type;
        foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
        {
            type = assembly.GetType(scriptName);
            if (type != null)
                return type;
        }
        return null;
    }   
}
