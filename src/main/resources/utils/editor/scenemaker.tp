using System;
using System.Collections.Generic;
using %PROJECT_NAME%.Editor.Unity;
using UnityEngine;
using UnityEditor;
using %PROJECT_NAME%.Configs;

public class SceneMaker
{
    [MenuItem("%PROJECT_NAME%/Scenes/Create")]
    public static void Create()
    {
        var scenes = Enum.GetValues(typeof(Scenes));

        List<EditorBuildSettingsScene> settingsScenes = new List<EditorBuildSettingsScene>();

        foreach (Scenes scene in scenes)
        {

            UnitySceneBuilder sceneBuilder = new UnitySceneBuilder(scene);
            if (sceneBuilder.ShouldSave())
            {
                sceneBuilder.AddGameObject(scene + "ViewController");
                EditorBuildSettingsScene newScene = sceneBuilder.Save();
                settingsScenes.Add(newScene);
                Debug.Log("作成しました: " + scene);
            }
            else
            {
                Debug.Log("既に作成済です: " + scene);
            }
        }
        EditorBuildSettings.scenes = settingsScenes.ToArray();
        AssetDatabase.SaveAssets();
    }

/*
    private static void AddEventSystem()
    {
        GameObject obj = new GameObject("EventSystem");
        obj.AddComponent<EventSystem>();
        obj.AddComponent<StandaloneInputModule>();
    }

    private static void AddCanvas(string name, int priority)
    {
        Camera     camera        = GameObject.FindWithTag("MainCamera").GetComponent<Camera>();
        GameObject canvasObj = new GameObject( priority + "_" + name + "Canvas");
        Canvas     canvas    = canvasObj.AddComponent<Canvas>();
        canvas.worldCamera      = camera;
        canvas.renderMode       = RenderMode.ScreenSpaceCamera;
        canvas.sortingOrder     = priority;
        CanvasScaler scaler = canvasObj.AddComponent<CanvasScaler>();
        scaler.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
        scaler.referenceResolution = new Vector2(1920, 1080);
        canvasObj.AddComponent<GraphicRaycaster>();
    }
*/
}
